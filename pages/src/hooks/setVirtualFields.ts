import { CollectionAfterChangeHook, CollectionBeforeReadHook, PayloadRequest } from 'payload'
import { asPageCollectionConfigOrThrow } from '../collections/PageCollectionConfig.js'
import { Locale } from '../types/Locale.js'
import { PageCollectionConfig } from '../types/PageCollectionConfig.js'
import { PagesPluginConfig } from '../types/PagesPluginConfig.js'
import { setPageDocumentVirtualFields } from '../utils/setPageVirtualFields.js'
import { setRootPageDocumentVirtualFields } from '../utils/setRootPageVirtualFields.js'
import { localeFromRequest, localesFromRequest } from '../utils/localeFromRequest.js'

/**
 * Returns the fields that are necessary for the setVirtualFields hook to correctly generate the virtual fields.
 */
export function requiredFields(collectionConfig: PageCollectionConfig): string[] {
  return [
    'isRootPage',
    'slug',
    collectionConfig.page.parent.name,
    collectionConfig.page.breadcrumbs.labelField,
  ]
}

/**
 * A [CollectionBeforeReadHook] that sets the values for all virtual fields (path, breadcrumbs, alternatePaths) before a document is read.
 *
 * A "before read" hook is used, because it is fired before localized fields are flattened which is necessary for generating the alternate paths.
 */
export const setVirtualFieldsBeforeRead: CollectionBeforeReadHook = async ({
  doc,
  req,
  collection,
  context,
}) => {
  const pageConfig = asPageCollectionConfigOrThrow(collection)

  // #### Validate selected fields (if any) and return if no virtual fields are selected
  if (context.select) {
    const selectedFields = Object.keys(context.select)

    // If none of the virtual paths generated by this hook are selected, return early
    if (
      !selectedFields.includes('path') &&
      !selectedFields.includes('breadcrumbs') &&
      !selectedFields.includes('alternatePaths')
    ) {
      return doc
    }

    // Fields that are required to be selected but were not selected
    const missingSelectedFields = requiredFields(pageConfig).filter(
      (field) => !selectedFields.includes(field),
    )

    // For some setups with complex relationships I noticed that when queriying a document
    // the context.select object sometimes does not contain the real selection but the selection
    // of a sub-query.
    // When querying a document which has a relationship to a document with a different parent name
    // this causes the missingSelectedFields to include this parent name even though the doc includes the parent field.
    //
    // To avoid throwing in this case, check if the missingSelectedFields are actually missing in the document.
    //
    // TODO: try to reproduce this issue in a minimal setup and find out if this is a payload bug or not.

    // Fields that are required to be selected but do not exist in the document
    const missingFields = missingSelectedFields.filter(
      (field) => !Object.prototype.hasOwnProperty.call(doc, field),
    )

    if (missingFields.length === 0) {
      // All "missing" fields actually exist in the document, proceed
      if (missingSelectedFields.length > 0) {
        console.log(
          'Fields were not explicitly selected but exist in the document, proceeding:',
          missingSelectedFields.join(', ') +
            ' for document ' +
            doc.id +
            ' in collection ' +
            collection.slug,
        )
      }
    } else {
      if (missingSelectedFields.length > 0) {
        throw new Error(
          'The following fields are needed to generate the virtual fields for document ' +
            doc.id +
            ' in collection ' +
            collection.slug +
            ' but were not selected: ' +
            missingSelectedFields.join(', ') +
            ' selected fields: ' +
            selectedFields.join(', '),
        )
      }
    }
  }

  const locale = localeFromRequest(req)
  const locales = localesFromRequest(req)

  if (doc.isRootPage) {
    const docWithVirtualFields = setRootPageDocumentVirtualFields({
      doc,
      locale: locales ? 'all' : undefined, // For localized pages, the CollectionBeforeReadHook should always return the field values for all locales
      locales,
      breadcrumbLabelField: pageConfig.page.breadcrumbs.labelField,
      pathPrefix: pageConfig.page.path?.pathPrefix,
    })

    return docWithVirtualFields
  } else {
    // When the slug is not (yet) set, it is not possible to generate the path and breadcrumbs
    if ((locale && locale !== 'all' && !doc.slug?.[locale]) || !doc.slug) {
      return doc
    }

    if (locales && typeof doc.slug !== 'object') {
      throw new Error(
        'The slug must be an object with all available locales. Is the slug field set to be localized?',
      )
    }

    const docWithVirtualFields = await setPageDocumentVirtualFields({
      req,
      doc,
      locale: locales ? 'all' : undefined, // For localized pages, the CollectionBeforeReadHook should always return the field values for all locales
      locales,
      pageConfigAttributes: pageConfig.page,
    })

    return docWithVirtualFields
  }
}

/**
 * A `CollectionAfterChangeHook` that sets the values for all virtual fields.
 *
 * This "after change" hook is needed to re-fill the virtual fields after a document is changed/saved in the admin panel.
 */
export const setVirtualFieldsAfterChange: CollectionAfterChangeHook = async ({
  doc,
  req,
  collection,
}) => {
  // This type of hook is only called for one locale (therefore the locale cannot be set to 'all')
  const locale = localeFromRequest(req) as Locale | undefined
  const locales = localesFromRequest(req)

  const pageConfig = asPageCollectionConfigOrThrow(collection)

  if (doc.isRootPage) {
    const docWithVirtualFields = setRootPageDocumentVirtualFields({
      doc,
      locale,
      locales,
      breadcrumbLabelField: pageConfig.page.breadcrumbs.labelField,
      pathPrefix: pageConfig.page.path?.pathPrefix,
    })

    return docWithVirtualFields
  } else {
    // When the slug is not (yet) set, it is not possible to generate the path and breadcrumbs
    if (!doc.slug) {
      return doc
    }

    const docWithVirtualFields = await setPageDocumentVirtualFields({
      req,
      doc,
      locale,
      locales,
      pageConfigAttributes: pageConfig.page,
    })

    return docWithVirtualFields
  }
}
